trigger:
  branches:
    include:
      - main
  paths:
    include:
      - .pipelines/ci_build.yml
      - rprs_ds/*
      - setup.py

pr:
  branches:
    include:
    - main
    - develop
  autoCancel: false

variables:
- name: src_dir
  value: "rprs_ds/"
- name: test_dir
  value: "tests/"

stages:
- stage: "code_doc_quality"
  jobs:
  - job: 'code_quality'
    pool:
      vmImage: 'Ubuntu-latest'
    strategy:
      matrix:
        Python38:
          python.version: "3.8"
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: "$(python.version)"
      displayName: "Use Python $(python.version)"
    - script: |
        python -m pip install --upgrade pip
        pip install flake8
      displayName: 'Install code style dependencies'
    - script: |
        #flake8 --max-line-length=120 --ignore E501,W503  $(src_dir)
        flake8 --max-line-length=120 --ignore E501,W503  rprs_ds/rprs_dataset.py
      displayName: 'Run code quality tests (flake8)'

  - template: whitesource-scan-template.yml

  - job: "docs_quality"
    pool:
      vmImage: ubuntu-latest
    strategy:
      matrix:
        Python38:
          python.version: "3.8"
    steps:
    - task: UsePythonVersion@0
      displayName: "Use Python version"
      inputs:
        versionSpec: "$(python.version)"
    - script: |
        pip install pydocstyle==6.1.1
        #pydocstyle $(src_dir)  # atm, will not pass on other modules
        #pydocstyle rprs_ds/rprs_dataset.py
      displayName: "docs style"
- stage: "tests_report"
  jobs:
  - job: "build"
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        architecture: 'x64'
      displayName: "Use Python version"
    - script: |
        python -m pip install --upgrade pip
        pip install pytest mock codecov pydocstyle pytest-cov
      displayName: 'Install testing dependencies'
    - script: |
        pip install -r requirements.txt
      displayName: 'Install project requirements'
    - script: |
        pip install -e .
        """
        the fact that Python by default puts the current directory in sys.path to import your package,
        execute python -m pytest will execute the tests against the local copy directly, without using pip.
        """
        python -m pytest -v ./tests --doctest-modules --junitxml=unit-testresults.xml --cov=./rprs_ds --cov-append --cov-report=xml:coverage.xml --cov-report=html:htmlcov
      displayName: 'Run all unit tests'
      env:
        LOG_LEVEL: "WARNING"
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*-testresults.xml'
        testRunTitle: '$(Agent.OS) - $(Build.BuildNumber)[$(Agent.JobName)] - Python $(python.version) - Linting and Unit Test results'
      condition: succeededOrFailed()
      displayName: 'Publish unit test results'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: 'coverage.xml'
        reportDirectory: 'htmlcov'
      displayName: 'Publish Coverage Results'
    - task: Bash@3
      displayName: "Validate packaging"
      inputs:
        targetType: 'inline'
        script: |
          # run tests
          pip install wheel
          python setup.py bdist_wheel
